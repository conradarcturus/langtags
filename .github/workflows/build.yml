name: Build
on:
  workflow_call:
    inputs:
      sldr-run-id:
        type: string
        required: false
        default: null
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      run-id: ${{ github.event.client_payload.run_id }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install langtags package and depedencies
      run: pip install . \
          git+https://github.com/silnrsi/{sldrtools#sldrtools,palaso-python#palaso} \
          six

    - name: Find latest SLDR dependency
      if: ${{ env.run-id == null }}
      env:
        sldr-branch: ${{ (github.event.branch || github.ref_name) == 'release' && 'release' || 'master' }}
      uses: actions/github-script@v7
      id: find-sldr
      with:
        script: |
          const result = await github.rest.actions
            .listWorkflowRunsForRepo({
              owner: "${{ github.repository_owner }}",
              repo: "sldr",
              branch: "${{ env.sldr-branch }}",
              exclude_pull_requests: true
            })
          core.debug(context)
          core.exportVariable("run-id", result.data.workflow_runs[0].id)

    - uses: actions/cache@v4
      id: cached-sldr
      with:
        path: |
          unflat
          flat
        key: sldr-${{ env.run-id }}

    - uses: actions/download-artifact@v4
      with:
        name: sldr
        repository: sldr
        run-id: ${{ env.run-id }}

    # - name: Download the SLDR dependency
    #   if: steps.cached-sldr.outputs.cache-hit != 'true'
    #   uses: actions/github-script@v7
    #   env:
    #     artifact_id: ${{ steps.find-sldr.outputs.artifact-id }}
    #   with:
    #     script: |
    #       const fs = require('fs')
    #       const response = await github.rest.actions
    #         .downloadArtifact({
    #           owner: "silnrsi",
    #           repo: "sldr",
    #           artifact_id: process.env.artifact_id,
    #           archive_format: "zip"
    #         })
    #       fs.writeFileSync('sldr.zip', Buffer.from(response.data))

    # - name: Extract SLDR dependency
    #   if: steps.cached-sldr.outputs.cache-hit != 'true'
    #   run: |
    #     unzip -q sldr.zip
    #     rm sldr.zip
    
    # Build it
    - name: Generate langtags
      run: make SLDR=unflat FLATDIR=flat build

    - uses: actions/upload-artifact@v4
      id: upload
      with:
        name: langtags
        path: |
          pub/**

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - run: pip install . \
          git+https://github.com/silnrsi/{sldrtools#sldrtools,palaso-python#palaso} \
          six

    - uses: actions/download-artifact@v4
      with:
        name: langtags
        path: pub

    # Test it.
    - name: Test langtags
      id: langtags
      run: |
        python3 -m unittest tests.test_json tests.python.test_python tests.test_basic
